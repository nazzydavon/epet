{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JERRY\\\\Documents\\\\myapp\\\\telegram-mini-app\\\\frontend\\\\src\\\\components\\\\MissionTab.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CelebrationAnimation from './CelebrationAnimation';\nimport * as api from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MissionTab = ({\n  updateTONBalance,\n  updateQuizEarnings\n}) => {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [result, setResult] = useState(null);\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [quizEarnings, setQuizEarnings] = useState(0);\n  const loadNewQuestion = async () => {\n    try {\n      const response = await api.getQuestion();\n      setCurrentQuestion(response.data);\n      setSelectedAnswer(null);\n      setResult(null);\n    } catch (error) {\n      console.error('Error loading question:', error);\n    }\n  };\n  useEffect(() => {\n    loadNewQuestion();\n\n    // Set up a timer to load a new question every 24 hours\n    const timer = setInterval(loadNewQuestion, 24 * 60 * 60 * 1000);\n    return () => clearInterval(timer);\n  }, []);\n  const handleAnswerSelection = index => {\n    setSelectedAnswer(index);\n  };\n  const handleSubmit = async () => {\n    if (selectedAnswer === null || !currentQuestion) return;\n    try {\n      const response = await api.submitAnswer(currentQuestion.id, selectedAnswer);\n      if (response.data.correct) {\n        const reward = response.data.reward;\n        setResult(`Correct! You earned ${reward} TON.`);\n        updateTONBalance(reward);\n        updateQuizEarnings(reward);\n        setQuizEarnings(prevEarnings => prevEarnings + reward);\n        setShowCelebration(true);\n\n        // Set a timeout to hide the celebration, show the result, and then load a new question\n        setTimeout(() => {\n          setShowCelebration(false);\n          setTimeout(() => {\n            loadNewQuestion();\n          }, 1500); // Wait 1.5 seconds after hiding celebration before loading new question\n        }, 3000); // Celebration lasts for 3 seconds\n      } else {\n        setResult(`Incorrect. The correct answer was: ${response.data.correctAnswer}`);\n        // Load new question after 3 seconds for incorrect answers\n        setTimeout(loadNewQuestion, 3000);\n      }\n    } catch (error) {\n      console.error('Error submitting answer:', error);\n      setResult('An error occurred. Please try again.');\n    }\n  };\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-gray-900 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4 text-white\",\n      children: \"Daily Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 text-yellow-400\",\n      children: [\"Quiz Earnings: \", quizEarnings.toFixed(2), \" TON\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-800 p-4 rounded-lg mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl mb-2 text-white\",\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), currentQuestion.answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAnswerSelection(index),\n        className: `block w-full text-left p-2 mb-2 rounded ${selectedAnswer === index ? 'bg-blue-600' : 'bg-gray-700'} text-white`,\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: selectedAnswer === null,\n      className: `w-full p-2 rounded ${selectedAnswer === null ? 'bg-gray-600' : 'bg-green-600'} text-white`,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mt-4 p-2 rounded ${result.startsWith('Correct') ? 'bg-green-700' : 'bg-red-700'} text-white`,\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), showCelebration && /*#__PURE__*/_jsxDEV(CelebrationAnimation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(MissionTab, \"RrS3cYebli0FJF168sP4j4CCV7Q=\");\n_c = MissionTab;\nexport default MissionTab;\nvar _c;\n$RefreshReg$(_c, \"MissionTab\");","map":{"version":3,"names":["React","useState","useEffect","CelebrationAnimation","api","jsxDEV","_jsxDEV","MissionTab","updateTONBalance","updateQuizEarnings","_s","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","result","setResult","showCelebration","setShowCelebration","quizEarnings","setQuizEarnings","loadNewQuestion","response","getQuestion","data","error","console","timer","setInterval","clearInterval","handleAnswerSelection","index","handleSubmit","submitAnswer","id","correct","reward","prevEarnings","setTimeout","correctAnswer","children","fileName","_jsxFileName","lineNumber","columnNumber","className","toFixed","question","answers","map","answer","onClick","disabled","startsWith","_c","$RefreshReg$"],"sources":["C:/Users/JERRY/Documents/myapp/telegram-mini-app/frontend/src/components/MissionTab.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CelebrationAnimation from './CelebrationAnimation';\nimport * as api from '../api';\n\ninterface Question {\n  id: string;\n  question: string;\n  answers: string[];\n}\n\ninterface MissionTabProps {\n  updateTONBalance: (amount: number) => void;\n  updateQuizEarnings: (amount: number) => void;\n}\n\nconst MissionTab: React.FC<MissionTabProps> = ({ updateTONBalance, updateQuizEarnings }) => {\n  const [currentQuestion, setCurrentQuestion] = useState<Question | null>(null);\n  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);\n  const [result, setResult] = useState<string | null>(null);\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [quizEarnings, setQuizEarnings] = useState<number>(0);\n\n  const loadNewQuestion = async () => {\n    try {\n      const response = await api.getQuestion();\n      setCurrentQuestion(response.data);\n      setSelectedAnswer(null);\n      setResult(null);\n    } catch (error) {\n      console.error('Error loading question:', error);\n    }\n  };\n\n  useEffect(() => {\n    loadNewQuestion();\n\n    // Set up a timer to load a new question every 24 hours\n    const timer = setInterval(loadNewQuestion, 24 * 60 * 60 * 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const handleAnswerSelection = (index: number) => {\n    setSelectedAnswer(index);\n  };\n\n  const handleSubmit = async () => {\n    if (selectedAnswer === null || !currentQuestion) return;\n\n    try {\n      const response = await api.submitAnswer(currentQuestion.id, selectedAnswer);\n      if (response.data.correct) {\n        const reward = response.data.reward;\n        setResult(`Correct! You earned ${reward} TON.`);\n        updateTONBalance(reward);\n        updateQuizEarnings(reward);\n        setQuizEarnings(prevEarnings => prevEarnings + reward);\n        setShowCelebration(true);\n        \n        // Set a timeout to hide the celebration, show the result, and then load a new question\n        setTimeout(() => {\n          setShowCelebration(false);\n          setTimeout(() => {\n            loadNewQuestion();\n          }, 1500); // Wait 1.5 seconds after hiding celebration before loading new question\n        }, 3000); // Celebration lasts for 3 seconds\n      } else {\n        setResult(`Incorrect. The correct answer was: ${response.data.correctAnswer}`);\n        // Load new question after 3 seconds for incorrect answers\n        setTimeout(loadNewQuestion, 3000);\n      }\n    } catch (error) {\n      console.error('Error submitting answer:', error);\n      setResult('An error occurred. Please try again.');\n    }\n  };\n\n  if (!currentQuestion) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"p-4 bg-gray-900 min-h-screen\">\n      <h2 className=\"text-2xl font-bold mb-4 text-white\">Daily Quiz</h2>\n      <div className=\"mb-4 text-yellow-400\">Quiz Earnings: {quizEarnings.toFixed(2)} TON</div>\n      <div className=\"bg-gray-800 p-4 rounded-lg mb-4\">\n        <h3 className=\"text-xl mb-2 text-white\">{currentQuestion.question}</h3>\n        {currentQuestion.answers.map((answer, index) => (\n          <button\n            key={index}\n            onClick={() => handleAnswerSelection(index)}\n            className={`block w-full text-left p-2 mb-2 rounded ${\n              selectedAnswer === index ? 'bg-blue-600' : 'bg-gray-700'\n            } text-white`}\n          >\n            {answer}\n          </button>\n        ))}\n      </div>\n      <button\n        onClick={handleSubmit}\n        disabled={selectedAnswer === null}\n        className={`w-full p-2 rounded ${\n          selectedAnswer === null ? 'bg-gray-600' : 'bg-green-600'\n        } text-white`}\n      >\n        Submit Answer\n      </button>\n      {result && (\n        <div className={`mt-4 p-2 rounded ${\n          result.startsWith('Correct') ? 'bg-green-700' : 'bg-red-700'\n        } text-white`}>\n          {result}\n        </div>\n      )}\n      {showCelebration && <CelebrationAnimation />}\n    </div>\n  );\n};\n\nexport default MissionTab;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}